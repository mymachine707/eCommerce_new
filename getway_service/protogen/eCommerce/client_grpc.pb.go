// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protos/client.proto

package eCommerce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientsServiceClient is the client API for ClientsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientsServiceClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error)
	CreateClients(ctx context.Context, in *CreateClientsRequest, opts ...grpc.CallOption) (*Clients, error)
	UpdateClients(ctx context.Context, in *UpdateClientsRequest, opts ...grpc.CallOption) (*Clients, error)
	DeleteClients(ctx context.Context, in *DeleteClientsRequest, opts ...grpc.CallOption) (*Clients, error)
	GetClientsList(ctx context.Context, in *GetClientsListRequest, opts ...grpc.CallOption) (*GetClientsListResponse, error)
	GetClientsById(ctx context.Context, in *GetClientsByIDRequest, opts ...grpc.CallOption) (*Clients, error)
	Login(ctx context.Context, in *LoginAuthRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	HasAccess(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*HasAccessResponse, error)
	CreateSuperUser(ctx context.Context, in *CreateSudoRequest, opts ...grpc.CallOption) (*Clients, error)
}

type clientsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientsServiceClient(cc grpc.ClientConnInterface) ClientsServiceClient {
	return &clientsServiceClient{cc}
}

func (c *clientsServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/ClientsService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) CreateClients(ctx context.Context, in *CreateClientsRequest, opts ...grpc.CallOption) (*Clients, error) {
	out := new(Clients)
	err := c.cc.Invoke(ctx, "/ClientsService/CreateClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) UpdateClients(ctx context.Context, in *UpdateClientsRequest, opts ...grpc.CallOption) (*Clients, error) {
	out := new(Clients)
	err := c.cc.Invoke(ctx, "/ClientsService/UpdateClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) DeleteClients(ctx context.Context, in *DeleteClientsRequest, opts ...grpc.CallOption) (*Clients, error) {
	out := new(Clients)
	err := c.cc.Invoke(ctx, "/ClientsService/DeleteClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) GetClientsList(ctx context.Context, in *GetClientsListRequest, opts ...grpc.CallOption) (*GetClientsListResponse, error) {
	out := new(GetClientsListResponse)
	err := c.cc.Invoke(ctx, "/ClientsService/GetClientsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) GetClientsById(ctx context.Context, in *GetClientsByIDRequest, opts ...grpc.CallOption) (*Clients, error) {
	out := new(Clients)
	err := c.cc.Invoke(ctx, "/ClientsService/GetClientsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) Login(ctx context.Context, in *LoginAuthRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/ClientsService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) HasAccess(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*HasAccessResponse, error) {
	out := new(HasAccessResponse)
	err := c.cc.Invoke(ctx, "/ClientsService/HasAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) CreateSuperUser(ctx context.Context, in *CreateSudoRequest, opts ...grpc.CallOption) (*Clients, error) {
	out := new(Clients)
	err := c.cc.Invoke(ctx, "/ClientsService/CreateSuperUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientsServiceServer is the server API for ClientsService service.
// All implementations must embed UnimplementedClientsServiceServer
// for forward compatibility
type ClientsServiceServer interface {
	Ping(context.Context, *Empty) (*Pong, error)
	CreateClients(context.Context, *CreateClientsRequest) (*Clients, error)
	UpdateClients(context.Context, *UpdateClientsRequest) (*Clients, error)
	DeleteClients(context.Context, *DeleteClientsRequest) (*Clients, error)
	GetClientsList(context.Context, *GetClientsListRequest) (*GetClientsListResponse, error)
	GetClientsById(context.Context, *GetClientsByIDRequest) (*Clients, error)
	Login(context.Context, *LoginAuthRequest) (*TokenResponse, error)
	HasAccess(context.Context, *TokenRequest) (*HasAccessResponse, error)
	CreateSuperUser(context.Context, *CreateSudoRequest) (*Clients, error)
	mustEmbedUnimplementedClientsServiceServer()
}

// UnimplementedClientsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientsServiceServer struct {
}

func (UnimplementedClientsServiceServer) Ping(context.Context, *Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedClientsServiceServer) CreateClients(context.Context, *CreateClientsRequest) (*Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClients not implemented")
}
func (UnimplementedClientsServiceServer) UpdateClients(context.Context, *UpdateClientsRequest) (*Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClients not implemented")
}
func (UnimplementedClientsServiceServer) DeleteClients(context.Context, *DeleteClientsRequest) (*Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClients not implemented")
}
func (UnimplementedClientsServiceServer) GetClientsList(context.Context, *GetClientsListRequest) (*GetClientsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientsList not implemented")
}
func (UnimplementedClientsServiceServer) GetClientsById(context.Context, *GetClientsByIDRequest) (*Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientsById not implemented")
}
func (UnimplementedClientsServiceServer) Login(context.Context, *LoginAuthRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedClientsServiceServer) HasAccess(context.Context, *TokenRequest) (*HasAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasAccess not implemented")
}
func (UnimplementedClientsServiceServer) CreateSuperUser(context.Context, *CreateSudoRequest) (*Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSuperUser not implemented")
}
func (UnimplementedClientsServiceServer) mustEmbedUnimplementedClientsServiceServer() {}

// UnsafeClientsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientsServiceServer will
// result in compilation errors.
type UnsafeClientsServiceServer interface {
	mustEmbedUnimplementedClientsServiceServer()
}

func RegisterClientsServiceServer(s grpc.ServiceRegistrar, srv ClientsServiceServer) {
	s.RegisterService(&ClientsService_ServiceDesc, srv)
}

func _ClientsService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientsService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_CreateClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).CreateClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientsService/CreateClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).CreateClients(ctx, req.(*CreateClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_UpdateClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).UpdateClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientsService/UpdateClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).UpdateClients(ctx, req.(*UpdateClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_DeleteClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).DeleteClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientsService/DeleteClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).DeleteClients(ctx, req.(*DeleteClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_GetClientsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).GetClientsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientsService/GetClientsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).GetClientsList(ctx, req.(*GetClientsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_GetClientsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).GetClientsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientsService/GetClientsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).GetClientsById(ctx, req.(*GetClientsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientsService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).Login(ctx, req.(*LoginAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_HasAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).HasAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientsService/HasAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).HasAccess(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_CreateSuperUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSudoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).CreateSuperUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientsService/CreateSuperUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).CreateSuperUser(ctx, req.(*CreateSudoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientsService_ServiceDesc is the grpc.ServiceDesc for ClientsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClientsService",
	HandlerType: (*ClientsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ClientsService_Ping_Handler,
		},
		{
			MethodName: "CreateClients",
			Handler:    _ClientsService_CreateClients_Handler,
		},
		{
			MethodName: "UpdateClients",
			Handler:    _ClientsService_UpdateClients_Handler,
		},
		{
			MethodName: "DeleteClients",
			Handler:    _ClientsService_DeleteClients_Handler,
		},
		{
			MethodName: "GetClientsList",
			Handler:    _ClientsService_GetClientsList_Handler,
		},
		{
			MethodName: "GetClientsById",
			Handler:    _ClientsService_GetClientsById_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ClientsService_Login_Handler,
		},
		{
			MethodName: "HasAccess",
			Handler:    _ClientsService_HasAccess_Handler,
		},
		{
			MethodName: "CreateSuperUser",
			Handler:    _ClientsService_CreateSuperUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/client.proto",
}
